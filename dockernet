#!/bin/bash
# Dockernet enables you to build a flexible Docker network.
# developer: Rayson Zhu <vfreex@gmail.com>
# inspired from [pipework](https://github.com/jpetazzo/pipework)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

EXEC_NAME=`basename -- "$0"`
BRIDGE_IFNAME=docker0
CONTAINER_IFNAME=eth0

warn () {
  echo "$@" >&2
}

die () {
  status="$1"
  shift
  warn "$@"
  cleanup
  exit "$status"
}

help() {
  echo "Usage:	$EXEC_NAME <CONTAINER> addif <CONTAINER_IFNAME> [<BRIDGE_IFNAME>=docker0]"
  echo "	$EXEC_NAME <CONTAINER> delif <CONTAINER_IFNAME>"
  echo "	$EXEC_NAME <CONTAINER> up <CONTAINER_IFNAME>"
  echo "	$EXEC_NAME <CONTAINER> down <CONTAINER_IFNAME>"
  echo "	$EXEC_NAME <CONTAINER> addip <CONTAINER_IFNAME> <IP_CIDR> [<DEFAULT_GATEWAY>]"
  echo "	$EXEC_NAME <CONTAINER> delip <CONTAINER_IFNAME> <IP_CIDR>"
  echo "	$EXEC_NAME <CONTAINER> clearip <CONTAINER_IFNAME>"
  echo "	$EXEC_NAME <CONTAINER> addroute <CONTAINER_IFNAME> <ROUTE>"
  echo "	$EXEC_NAME <CONTAINER> delroute <CONTAINER_IFNAME> <ROUTE>"
  echo "	$EXEC_NAME --wait <IFNAME>"
}

# prepare net namespace
setup() {
  RETRIES=5
  while [ "$RETRIES" -gt 0 ]; do
    DOCKERPID=$(docker inspect -f '{{.State.Pid}}' "$CONTAINER_NAME" 2>/dev/null)
    [ "$DOCKERPID" != 0 ] && break
    sleep 1
    RETRIES=$((RETRIES - 1))
  done
  NSPID="$DOCKERPID"
  if [ -z "$NSPID" ]; then die 1 "ERROR: Container '$CONTAINER_NAME' doesn't exist."; fi
  mkdir -p /var/run/netns
  rm -f "/var/run/netns/$NSPID"
  ln -s "/proc/$NSPID/ns/net" "/var/run/netns/$NSPID"
}

# clean up net namespace symbol
cleanup() {
  rm -f "/var/run/netns/$NSPID"
}

# addif <CONTAINER_IFNAME> [<BRIDGE_IFNAME>=docker0]
addif() {
  CONTAINER_IFNAME="$1"
  BRIDGE_IFNAME="$2"
  if [ -z "$BRIDGE_IFNAME" ]; then BRIDGE_IFNAME=docker0; fi
  HOST_IFNAME=v"$CONTAINER_IFNAME"pl"$NSPID"
  GUEST_IFNAME=v"$CONTAINER_IFNAME"pg"$NSPID"
  if ! ip link add "$HOST_IFNAME" type veth peer name "$GUEST_IFNAME"; then
    die 1 "ERROR: Fail to create virtual NICs."
  fi
  if ! brctl addif "$BRIDGE_IFNAME" "$HOST_IFNAME"; then
    die 1 "ERROR: Fail to bridge host NIC."
  fi
  if ! ip link set "$HOST_IFNAME" up; then
    die 1 "ERROR: Fail to turn up host NIC."
  fi
  if ! ip link set "$GUEST_IFNAME" netns "$NSPID"; then
    die 1 "ERROR: Fail to set up guest NIC."
  fi
  if ! ip netns exec "$NSPID" ip link set dev "$GUEST_IFNAME" name "$CONTAINER_IFNAME"; then
    die 1 "ERROR: Fail to rename container NIC."
  fi
}

# addif <CONTAINER_IFNAME>
delif() {
  CONTAINER_IFNAME="$1"
  HOST_IFNAME=v"$CONTAINER_IFNAME"pl"$NSPID"
  if ! ip link del "$HOST_IFNAME"; then
    die 1 "ERROR: Fail to delete virutal NIC."
  fi
}

# up <CONTAINER_IFNAME>
up() {
  CONTAINER_IFNAME="$1"
  if ! ip netns exec "$NSPID" ip link set "$CONTAINER_IFNAME" up; then
    die 1 "ERROR: Fail to turn up virutal NIC."
  fi
}

# down <CONTAINER_IFNAME>
down() {
  CONTAINER_IFNAME="$1"
  if ! ip netns exec "$NSPID" ip link set "$CONTAINER_IFNAME" down; then
    die 1 "ERROR: Fail to turn down virutal NIC."
  fi
}

# addip <CONTAINER_IFNAME> <IP_CIDR> [<DEFAULT_GATEWAY>]
addip() {
  CONTAINER_IFNAME="$1"
  IP_CIDR="$2"
  DEFAULT_GATEWAY="$3"
  if ! ip netns exec "$NSPID" ip addr add "$IP_CIDR" dev "$CONTAINER_IFNAME"; then
    die 1 "ERROR: Fail to add ip address."
  fi
  if [ -n "$DEFAULT_GATEWAY" ] && ! ip netns exec "$NSPID" ip route add default via "$DEFAULT_GATEWAY" dev "$CONTAINER_IFNAME"; then
    die 1 "ERROR: Fail to add default route."
  fi
}

# delip <CONTAINER_IFNAME> <IP_CIDR>
delip() {
  CONTAINER_IFNAME="$1"
  IP_CIDR="$2"
  if ! ip netns exec "$NSPID" ip addr del "$IP_CIDR" dev "$CONTAINER_IFNAME"; then
    die 1 "ERROR: Fail to delete ip address."
  fi
}

# clearip <CONTAINER_IFNAME>
clearip() {
  CONTAINER_IFNAME="$1"
  if ! ip netns exec "$NSPID" ip addr flush dev "$CONTAINER_IFNAME"; then
    die 1 "ERROR: Fail to clear all ip addresses."
  fi
}

# addroute <CONTAINER_IFNAME> <ROUTE>
addroute() {
  CONTAINER_IFNAME="$1"
  shift
  ROUTE="$@"
  if ! ip netns exec "$NSPID" ip route add dev "$CONTAINER_IFNAME" $ROUTE; then
    die 1 "ERROR: Fail to add route."
  fi
}

# delroute <CONTAINER_IFNAME> <ROUTE>
delroute() {
  CONTAINER_IFNAME="$1"
  shift
  ROUTE="$@"
  if ! ip netns exec "$NSPID" ip route del dev "$CONTAINER_IFNAME" $ROUTE; then
    die 1 "ERROR: Fail to delete route."
  fi
}

# wait <CONTAINER_IFNAME>
wait() {
  CONTAINER_IFNAME="$1"
  while true; do
    ip link show dev "$CONTAINER_IFNAME" up | grep UP && break
    sleep 1
  done > /dev/null 2>&1
}

# entry
if [ "$#" -lt 2 ]; then
  help
  exit
fi

if [ "$1" = "--wait" ]; then wait "$2"; exit 0; fi

CONTAINER_NAME="$1"
shift
case "$1" in
addif|delif|up|down|addip|delip|clearip|addroute|delroute)
  setup
  $@
  cleanup
  ;;
*)
  help
  ;;
esac




